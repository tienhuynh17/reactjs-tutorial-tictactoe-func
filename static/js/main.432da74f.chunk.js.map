{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/Game/index.js","index.js"],"names":["Square","props","highlight","className","onClick","value","Board","renderSquare","i","isHighlighted","key","squares","size","board","result","boardRow","j","iCell","push","renderBoard","calculateWinner","lines","length","a","b","c","Game","moves","status","useState","Array","fill","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","orderedChecked","setOrderedChecked","isReversedMoves","setIsReversedMoves","copiedOrReversedOrderChecked","setCopiedOrReversedOrderChecked","jumpTo","step","current","winner","map","move","desc","history1","slice","cloneSquares","cloneOrderChecked","concat","handleClick","reverse","reversed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.432da74f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Square = (props) => {\r\n  if (props.highlight) {\r\n    return (\r\n      <button className=\"square highlight\" onClick={() => props.onClick()}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  } else {\r\n    return (\r\n      <button className=\"square\" onClick={() => props.onClick()}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nimport Square from \"../Square\";\r\n\r\nconst Board = (props) => {\r\n  const renderSquare = (i, isHighlighted) => {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        highlight={isHighlighted}\r\n        value={props.squares[i]}\r\n        onClick={() => props.onClick(i)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderBoard = (size) => {\r\n    let board = [];\r\n    const result = props.result;\r\n    for (let i = 0; i < size; i++) {\r\n      let boardRow = [];\r\n      for (let j = 0; j < size; j++) {\r\n        const iCell = i * size + j;\r\n        if (\r\n          result &&\r\n          (result[1] === iCell || result[2] === iCell || result[3] === iCell)\r\n        )\r\n          boardRow.push(renderSquare(iCell, true));\r\n        else boardRow.push(renderSquare(iCell, false));\r\n      }\r\n      board.push(\r\n        <div key={i} className=\"board-row\">\r\n          {boardRow}\r\n        </div>\r\n      );\r\n    }\r\n    return board;\r\n  };\r\n\r\n  return <div>{renderBoard(3)}</div>;\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nimport Board from \"../Board\";\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return [squares[a], a, b, c];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nconst Game = () => {\r\n  const [history, setHistory] = useState([{ squares: Array(9).fill(null) }]);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [orderedChecked, setOrderedChecked] = useState(Array(0));\r\n  const [isReversedMoves, setIsReversedMoves] = useState(false);\r\n  const [\r\n    copiedOrReversedOrderChecked,\r\n    setCopiedOrReversedOrderChecked,\r\n  ] = useState(Array(0));\r\n\r\n  const handleClick = (i) => {\r\n    const history1 = history.slice(0, stepNumber + 1);\r\n    const current = history1[history1.length - 1];\r\n    const cloneSquares = current.squares.slice();\r\n    const cloneOrderChecked = orderedChecked.concat(i);\r\n    if (calculateWinner(cloneSquares) || cloneSquares[i]) {\r\n      return;\r\n    }\r\n    cloneSquares[i] = xIsNext ? \"X\" : \"O\";\r\n\r\n    setHistory(history1.concat([{ squares: cloneSquares }]));\r\n    setXIsNext(!xIsNext);\r\n    setStepNumber(history1.length);\r\n    setOrderedChecked(cloneOrderChecked);\r\n    setCopiedOrReversedOrderChecked(cloneOrderChecked);\r\n  };\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  };\r\n\r\n  const toggleMoves = () => {\r\n    setIsReversedMoves(!isReversedMoves);\r\n    setCopiedOrReversedOrderChecked(\r\n      copiedOrReversedOrderChecked.slice().reverse()\r\n    );\r\n  };\r\n\r\n  const current = history[stepNumber];\r\n\r\n  const result = calculateWinner(current.squares);\r\n  const winner = result && result[0];\r\n\r\n  let moves;\r\n  moves = history.map((step, move) => {\r\n    if (isReversedMoves === true) {\r\n      move = history.length - 1 - move;\r\n    }\r\n    const iCell = copiedOrReversedOrderChecked[move - 1];\r\n    const nRow = ~~(iCell / 3);\r\n    const nCol = iCell % 3;\r\n    const desc = move\r\n      ? \"Go to move #\" + move + \" (\" + nRow + \", \" + nCol + \")\"\r\n      : \"Go to game start\";\r\n    if (move === stepNumber) {\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>\r\n            <b>{desc}</b>\r\n          </button>\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    }\r\n  });\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  } else if (stepNumber === 9) {\r\n    status = \"Draw match !\";\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          result={result}\r\n          squares={current.squares}\r\n          onClick={(i) => handleClick(i)}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <ul>\r\n          <li>\r\n            <button onClick={toggleMoves}>Toggle moves</button>\r\n          </li>\r\n        </ul>\r\n        {isReversedMoves === false && <ol>{moves}</ol>}\r\n        {isReversedMoves === true && <ol reversed>{moves}</ol>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport Game from \"./components/Game\";\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}